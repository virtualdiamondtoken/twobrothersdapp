{"version":3,"sources":["Web3Util.js","pages/HomePage.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["getInstanceClouds","web3","a","eth","getAccounts","window","user","instanceClouds","Contract","cloudsABI","from","getInstanceLynx","instanceLynx","lynxABI","HomePage","props","componentDidMount","Promise","resolve","reject","ethereum","Web3","enable","console","log","process","provider","providers","HttpProvider","contractInstanceClouds","contractInstanceLynx","setState","loadData","isLoadingHomepageData","vantaEffect","BIRDS","el","vantaRef","current","state","hasHomepageData","nftIndexLynx","nftIndexClouds","lynxSelect","isMintingLynx","isMintingCloud","isClaimingRewards","myRewards","mintLynx","bind","mintCloud","incrementLynx","decrementLynx","React","createRef","this","destroy","methods","totalSupply","call","index","undefined","getReflectionBalances","utils","fromWei","localValue","toWei","mint","send","value","claimRewards","currentLynx","Container","ref","style","textAlign","href","target","Grid","container","spacing","item","xs","md","alignItems","display","justifyContent","height","src","padding","Button","maxWidth","onClick","margin","parseFloat","toFixed","Component","Routes","exact","path","component","render","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2vvBAqCaA,EAAiB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACRD,EAAKE,IAAIC,cADD,cAC7BC,OAAOC,KADsB,OACgB,GAE7CD,OAAOE,eAAiB,IAAIN,EAAKE,IAAIK,SACjCC,EApCsB,6CAsCtB,CACIC,KAAML,OAAOC,OAPQ,kBAUtBD,OAAOE,gBAVe,2CAAH,sDAajBI,EAAe,uCAAG,WAAOV,GAAP,SAAAC,EAAA,sEACND,EAAKE,IAAIC,cADH,cAC3BC,OAAOC,KADoB,OACkB,GAE7CD,OAAOO,aAAe,IAAIX,EAAKE,IAAIK,SAC/BK,EAhDoB,6CAkDpB,CACIH,KAAML,OAAOC,OAPM,kBAUpBD,OAAOO,cAVa,2CAAH,sD,oDCyMbE,E,kDA9Ob,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoBRC,kBArBmB,sBAqBC,gCAAAd,EAAA,+EDzBlB,IAAIe,QAAJ,uCAAY,WAAMC,EAASC,GAAf,qBAAAjB,EAAA,0DACRG,OAAOe,SADC,wBAEFnB,EAAO,IAAIoB,IAAKhB,OAAOe,UAFrB,kBAIFf,OAAOe,SAASE,SAJd,OAKRJ,EAAQjB,GALA,gDAORkB,EAAO,EAAD,IAPE,gCASDd,OAAOJ,MAERA,EAAOI,OAAOJ,KACpBsB,QAAQC,IAAI,2BACZN,EAAQjB,KAERsB,QAAQC,IAAIC,IAKNC,EAAW,IAAIL,IAAKM,UAAUC,aAAa,8CAG3C3B,EAAO,IAAIoB,IAAKK,GACtBH,QAAQC,IAAI,gDACZN,EAAQjB,IAzBA,yDAAZ,yDCyBkB,cAEVA,EAFU,OAGhBI,OAAOJ,KAAOA,EAHE,SAIqBD,EAAkBK,OAAOJ,MAJ9C,cAIV4B,EAJU,iBAKmBlB,EAAgBN,OAAOJ,MAL1C,eAKV6B,EALU,OAOhB,EAAKC,SAAS,CAAEzB,KAAMD,OAAOC,OAC7B,EAAKyB,SAAS,CAAEF,yBAAwBC,yBARxB,UASV,EAAKE,WATK,0DAWhBT,QAAQC,IAAI,QAAZ,MAXgB,yBAahB,EAAKO,SAAS,CACZE,uBAAsB,IAdR,qBAiBlB,EAAKC,YAAcC,IAAM,CACvBC,GAAI,EAAKC,SAASC,UAlBF,gEAnBlB,EAAKC,MAAQ,CACXC,iBAAiB,EACjBP,uBAAsB,EACtBQ,cAAc,IACdC,gBAAgB,IAChBC,WAAW,EACXC,eAAc,EACdC,gBAAe,EACfC,mBAAkB,EAClBC,UAAU,GAEZ,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,gBACrB,EAAKZ,SAAWgB,IAAMC,YAjBL,E,wDA2CnB,WACMC,KAAKrB,aAAaqB,KAAKrB,YAAYsB,Y,6DAGzC,gCAAAtD,EAAA,+EAEiCqD,KAAKhB,MAAMT,qBAAqB2B,QAAQC,cAAcC,OAFvF,cAEYlB,EAFZ,gBAGmCc,KAAKhB,MAAMV,uBAAuB4B,QAAQG,QAAQD,OAHrF,UAGYjB,EAHZ,YAKwBmB,GAAfxD,OAAOC,KALhB,kCAMgCiD,KAAKhB,MAAMT,qBAAqB2B,QAAQK,wBAAwBH,OANhG,SAMcZ,EANd,SAQUQ,KAAKxB,SAAS,CAACgB,UAAU1C,OAAOJ,KAAK8D,MAAMC,QAAQjB,KAR7D,QAYSN,GACDc,KAAKxB,SAAS,CAAEU,aAAaA,EAAa,IAEzCC,GACDa,KAAKxB,SAAS,CAAEW,eAAeA,EAAe,IAGhDa,KAAKxB,SAAS,CAACS,iBAAgB,IAnBrC,kDAqBIjB,QAAQC,IAAI,QAAZ,MArBJ,0D,mHAyBA,4BAAAtB,EAAA,sEAEMqD,KAAKxB,SAAS,CAACa,eAAc,IACzBqB,EAAa5D,OAAOJ,KAAK8D,MAAMG,MAhFxB,IAgF+BX,KAAKhB,MAAMI,WAAuB,GAAI,SAHtF,SAKYY,KAAKhB,MAAMT,qBAAqB2B,QAAQU,KAAKZ,KAAKhB,MAAMI,YAAYyB,KACxE,CAACC,MAAMJ,IANf,uBAQYV,KAAKvB,WARjB,uDAUIT,QAAQC,IAAI,QAAZ,MAVJ,yBAYI+B,KAAKxB,SAAS,CAACa,eAAc,IAZjC,4E,uHAgBA,sBAAA1C,EAAA,sEAEMqD,KAAKxB,SAAS,CAACe,mBAAkB,IAFvC,SAIYS,KAAKhB,MAAMT,qBAAqB2B,QAAQa,eAAeF,OAJnE,sDAMI7C,QAAQC,IAAI,QAAZ,MANJ,iCAQU+B,KAAKvB,WARf,eAUIuB,KAAKxB,SAAS,CAACe,mBAAkB,IAVrC,0E,oHAcA,sBAAA5C,EAAA,sEAEMqD,KAAKxB,SAAS,CAACc,gBAAe,IAFpC,SAIYU,KAAKhB,MAAMV,uBAAuB4B,QAAQP,YAAYkB,OAJlE,sDAMI7C,QAAQC,IAAI,QAAZ,MANJ,iCAQU+B,KAAKvB,WARf,eASIuB,KAAKxB,SAAS,CAACc,gBAAe,IATlC,0E,iFAaA,WACE,IAAI0B,EAAchB,KAAKhB,MAAMI,WAC1B4B,EAAY,IACbhB,KAAKxB,SAAS,CAACY,WAAW4B,EAAY,M,2BAI1C,WACE,IAAIA,EAAchB,KAAKhB,MAAMI,WAC1B4B,EAAY,GACbhB,KAAKxB,SAAS,CAACY,WAAW4B,EAAY,M,oBAM1C,WAAU,IAAD,OACP,OACM,eAACC,EAAA,EAAD,CAAWC,IAAKlB,KAAKlB,SAAUqC,MAAO,CAACC,UAAU,UAAjD,UACE,mCAAK,mBAAGC,KAAK,+BAA+BC,OAAO,SAA9C,kCACL,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGT,MAAO,CAACU,WAAW,SAASC,QAAQ,OAAOC,eAAe,UAApF,SACE,8BACG/B,KAAKhB,MAAME,eAAe,EACzB,sBAAKiC,MAAO,CAACC,UAAU,UAAvB,UACE,uBACA,kDACA,uBACA,qBAAKD,MAAO,CAACa,OAAO,SAAUC,IAAK,wFAAwFjC,KAAKhB,MAAME,aAAa,GAAG,SACtJ,uBACA,uBACA,8BAxJF,KAwJmBc,KAAKhB,MAAME,aAAa,GAAzC,mBAGH,mCACC,qEAKN,cAACqC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGT,MAAO,CAACU,WAAW,SAASC,QAAQ,OAAOC,eAAe,UAApF,SACE,8BACG/B,KAAKhB,MAAMG,iBAAiB,EAC3B,sBAAKgC,MAAO,CAACC,UAAU,UAAvB,UACE,uBACA,mDACA,uBACA,qBAAKD,MAAO,CAACa,OAAO,SAAUC,IAAK,wFAAwFjC,KAAKhB,MAAMG,eAAe,GAAG,SACxJ,uBACA,uBACA,8BAxKD,KAwKmBa,KAAKhB,MAAMG,eAAe,GAA5C,qBAGH,mCACC,2EAKUmB,GAAfxD,OAAOC,KACN,qCACA,cAACwE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGT,MAAO,CAACU,WAAW,SAASC,QAAQ,OAAOC,eAAe,SAAUG,QAAQ,GAAtG,SACE,8BACGlC,KAAKhB,MAAMK,cACV,2CAEF,8BA3LA,KA4LgBW,KAAKhB,MAAME,aAAa,GAAG,EACvC,qCAEA,cAACiD,EAAA,EAAD,CAAQhB,MAAO,CAACiB,SAAS,QAASC,QAAS,kBAAI,EAAKxC,iBAApD,iBAEA,eAACsC,EAAA,EAAD,CAAQE,QAAS,kBAAI,EAAK5C,YAA1B,kBAA4CO,KAAKhB,MAAMI,WAAvD,aAhML,IAgMkFY,KAAKhB,MAAMI,WAAxF,YACA,cAAC+C,EAAA,EAAD,CAAQhB,MAAO,CAACiB,SAAS,QAAUC,QAAS,kBAAI,EAAKzC,iBAArD,oBAID,WAOP,cAAC2B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGT,MAAO,CAACU,WAAW,SAASC,QAAQ,OAAOC,eAAe,UAApF,SACE,8BACC/B,KAAKhB,MAAMM,eACR,2CAEF,mCA/MC,KAgNgBU,KAAKhB,MAAMG,eAAe,GAAG,EAC1C,cAACgD,EAAA,EAAD,CAAQE,QAAS,kBAAI,EAAK1C,aAA1B,sCACD,WAKP,cAAC4B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIT,MAAO,CAACU,WAAW,SAASC,QAAQ,OAAOC,eAAe,UAArF,SAEG/B,KAAKhB,MAAMO,kBACR,oDAEF,mCACE,eAAC4C,EAAA,EAAD,CAAQhB,MAAO,CAACmB,OAAO,QAASD,QAAS,kBAAI,EAAKtB,gBAAlD,mBAAyEwB,WAAWvC,KAAKhB,MAAMQ,WAAWgD,QAAQ,GAAlH,2BAMV,cAACjB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIT,MAAO,CAACU,WAAW,SAASC,QAAQ,OAAOC,eAAe,UAArF,SAEI,kG,GAnOOjC,IAAM2C,WCYdC,E,4JAlBb,WACE,OACE,cAAC,IAAD,UACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtF,IACjC,cAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,QAAQC,UAAWtF,IAEvC,cAAC,IAAD,CACEuF,OAAQ,WACN,OAAO,uD,GAVIhD,IAAM2C,WCWZM,E,4JARb,WACE,OACE,cAAC,IAAD,UACE,cAAC,EAAD,U,GALUjD,IAAM2C,WCMJO,QACW,cAA7BlG,OAAOmG,SAASC,UAEe,UAA7BpG,OAAOmG,SAASC,UAEhBpG,OAAOmG,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,cAAC,EAAD,IAASO,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.65b28e4b.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport cloudsABI from './abi/clouds.json'\r\nimport lynxABI from './abi/lynx.json'\r\n\r\n// testnet \r\nconst contractAddressClouds = \"0x8218d95eaAe4dCA93f134f9b1Db9708f1a28f60F\"\r\nconst contractAddressLynx = \"0x0aE1FA266598e7fba670c71c1411f02264B4bF7d\"\r\n\r\nexport const getWeb3 = () =>\r\n    new Promise(async(resolve, reject) => {\r\n    if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n        await window.ethereum.enable();\r\n        resolve(web3);\r\n        } catch (error) {\r\n        reject(error);\r\n        }\r\n    } else if (window.web3) {\r\n        // load metamask provider\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n    } else {\r\n        console.log(process.env.PUBLIC_URL)\r\n        // main net\r\n        // const provider = new Web3.providers.HttpProvider(\"https://api.avax.network/ext/bc/C/rpc\");\r\n\r\n        // test net \r\n        const provider = new Web3.providers.HttpProvider(\"https://api.avax-test.network/ext/bc/C/rpc\");\r\n\r\n\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n    }\r\n});\r\nexport const getInstanceClouds = async (web3) => {\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    \r\n    window.instanceClouds = new web3.eth.Contract(\r\n        cloudsABI,\r\n        contractAddressClouds,\r\n        {\r\n            from: window.user\r\n        }\r\n    );\r\n    return window.instanceClouds;\r\n}\r\n\r\nexport const getInstanceLynx = async (web3) => {\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    \r\n    window.instanceLynx = new web3.eth.Contract(\r\n        lynxABI,\r\n        contractAddressLynx,\r\n        {\r\n            from: window.user\r\n        }\r\n    );\r\n    return window.instanceLynx;\r\n}","import React from \"react\";\r\nimport {getInstanceLynx, getInstanceClouds,getWeb3}  from \"../Web3Util\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport BIRDS from 'vanta/dist/vanta.clouds.min'\r\n\r\nconst LYNX_SUPPLY = 10000\r\nconst LYNX_PRICE = 1.5\r\n\r\nconst CLOUD_SUPPLY = 1000\r\n\r\nclass HomePage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasHomepageData: false,\r\n      isLoadingHomepageData:true,\r\n      nftIndexLynx:-100,\r\n      nftIndexClouds:-100,\r\n      lynxSelect:1,\r\n      isMintingLynx:false,\r\n      isMintingCloud:false,\r\n      isClaimingRewards:false,\r\n      myRewards:0\r\n    };\r\n    this.mintLynx = this.mintLynx.bind(this);\r\n    this.mintCloud = this.mintCloud.bind(this);\r\n    this.incrementLynx = this.incrementLynx.bind(this)\r\n    this.decrementLynx = this.decrementLynx.bind(this)\r\n    this.vantaRef = React.createRef()\r\n\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    try{\r\n      const web3 = await getWeb3();\r\n      window.web3 = web3;\r\n      const contractInstanceClouds = await getInstanceClouds(window.web3);\r\n      const contractInstanceLynx = await getInstanceLynx(window.web3);\r\n\r\n      this.setState({ user: window.user });\r\n      this.setState({ contractInstanceClouds, contractInstanceLynx});\r\n      await this.loadData();\r\n    } catch (e) {\r\n      console.log('Error', e)\r\n    }finally{\r\n      this.setState({\r\n        isLoadingHomepageData:false\r\n      })\r\n    }\r\n    this.vantaEffect = BIRDS({\r\n      el: this.vantaRef.current\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.vantaEffect) this.vantaEffect.destroy()\r\n  }\r\n  \r\n  async loadData() {\r\n      try {\r\n        const nftIndexLynx = await this.state.contractInstanceLynx.methods.totalSupply().call();\r\n        const nftIndexClouds = await this.state.contractInstanceClouds.methods.index().call();\r\n\r\n        if(window.user != undefined){\r\n          const myRewards = await this.state.contractInstanceLynx.methods.getReflectionBalances().call();\r\n          if(myRewards){\r\n            this.setState({myRewards:window.web3.utils.fromWei(myRewards)})\r\n          }\r\n        }\r\n      \r\n        if(nftIndexLynx){\r\n          this.setState({ nftIndexLynx:nftIndexLynx-1 });\r\n        }\r\n        if(nftIndexClouds){\r\n          this.setState({ nftIndexClouds:nftIndexClouds-1 });\r\n        }\r\n\r\n        this.setState({hasHomepageData:true})\r\n    } catch (e) {\r\n      console.log('Error', e)\r\n    }\r\n  }\r\n\r\n  async mintLynx(){\r\n    try {\r\n        this.setState({isMintingLynx:true})\r\n        let localValue = window.web3.utils.toWei((this.state.lynxSelect*LYNX_PRICE)+\"\", 'ether')\r\n\r\n        await this.state.contractInstanceLynx.methods.mint(this.state.lynxSelect).send(\r\n          {value:localValue}\r\n        )\r\n        await this.loadData()\r\n      } catch (e) {\r\n      console.log('Error', e)\r\n    }finally{\r\n      this.setState({isMintingLynx:false})\r\n    }\r\n  }\r\n\r\n  async claimRewards(){\r\n    try {\r\n        this.setState({isClaimingRewards:true})\r\n\r\n        await this.state.contractInstanceLynx.methods.claimRewards().send()\r\n      } catch (e) {\r\n      console.log('Error', e)\r\n    }finally{\r\n      await this.loadData()\r\n\r\n      this.setState({isClaimingRewards:false})\r\n    }\r\n  }\r\n\r\n  async mintCloud(){\r\n    try {\r\n        this.setState({isMintingCloud:true})\r\n\r\n        await this.state.contractInstanceClouds.methods.mintCloud().send()\r\n      } catch (e) {\r\n      console.log('Error', e)\r\n    }finally{\r\n      await this.loadData()\r\n      this.setState({isMintingCloud:false})\r\n    }\r\n  }\r\n\r\n  incrementLynx(){\r\n    let currentLynx = this.state.lynxSelect\r\n    if(currentLynx<20){\r\n      this.setState({lynxSelect:currentLynx+1})\r\n    }\r\n  }\r\n\r\n  decrementLynx(){\r\n    let currentLynx = this.state.lynxSelect\r\n    if(currentLynx>1){\r\n      this.setState({lynxSelect:currentLynx-1})\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    return(\r\n          <Container ref={this.vantaRef} style={{textAlign:\"center\"}}>\r\n            <h1> <a href=\"https://twobrothersnfts.art/\" target=\"_blank\">Two Brothers NFTs</a></h1>\r\n            <Grid container spacing={2} >\r\n              <Grid item xs={12} md={6} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\"}}>\r\n                <div>\r\n                  {this.state.nftIndexLynx>=-1?\r\n                    <div style={{textAlign:\"center\"}}>\r\n                      <br />\r\n                      <b>Last lynx minted:</b>\r\n                      <br />\r\n                      <img style={{height:\"250px\"}} src={\"https://cloudflare-ipfs.com/ipfs/QmX99xnDNHBT6RxyFt8Y5WUnafsGc3nTzydZDVAg15R2zg/avax\"+(this.state.nftIndexLynx+1)+\".png\"} />\r\n                      <br />\r\n                      <br />\r\n                      <b>{LYNX_SUPPLY-(this.state.nftIndexLynx+1)} lynx left</b>\r\n                    \r\n                    </div>\r\n                  :<>\r\n                    <b>Be the first to mint your lynx</b>\r\n                  </>}\r\n\r\n                </div>\r\n              </Grid>\r\n              <Grid item xs={12} md={6} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\"}}>\r\n                <div>\r\n                  {this.state.nftIndexClouds>=-1?\r\n                    <div style={{textAlign:\"center\"}}>\r\n                      <br />\r\n                      <b>Last cloud minted:</b>\r\n                      <br />\r\n                      <img style={{height:\"250px\"}} src={\"https://cloudflare-ipfs.com/ipfs/QmbPFUwz8uPMf1rNVDEp79YnrYLPMRv8TtaUGpv5EvfGAE/avax\"+(this.state.nftIndexClouds+1)+\".png\"} />\r\n                      <br />\r\n                      <br />\r\n                      <b>{CLOUD_SUPPLY-(this.state.nftIndexClouds+1)} clouds left</b> \r\n                    \r\n                    </div>\r\n                  :<>\r\n                    <b>Be the first to mint your cloud</b>\r\n                  </>}\r\n\r\n                </div>\r\n              </Grid>\r\n              {window.user != undefined?\r\n                <>\r\n                <Grid item xs={12} md={6} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\", padding:0}}>\r\n                  <div>\r\n                    {this.state.isMintingLynx?\r\n                      <b>Minting...</b>\r\n                      :\r\n                    <div>\r\n                      {LYNX_SUPPLY-(this.state.nftIndexLynx+1)>0?\r\n                        <>\r\n\r\n                        <Button style={{maxWidth:\"15px\"}} onClick={()=>this.decrementLynx()}  > - </Button>\r\n\r\n                        <Button onClick={()=>this.mintLynx()}>Mint {this.state.lynxSelect} lynx for {this.state.lynxSelect*LYNX_PRICE} $AVAX</Button>\r\n                        <Button style={{maxWidth:\"15px\"}}  onClick={()=>this.incrementLynx()} > + </Button>\r\n\r\n                        </>\r\n                    \r\n                      :null}\r\n                    \r\n                    </div>\r\n                    }\r\n                  \r\n                  </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={6} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\"}}>\r\n                  <div>\r\n                  {this.state.isMintingCloud?\r\n                      <b>Minting...</b>\r\n                      :\r\n                    <>\r\n                      {CLOUD_SUPPLY-(this.state.nftIndexClouds+1)>0?\r\n                        <Button onClick={()=>this.mintCloud()}>Mint your cloud for free</Button>\r\n                      :null}\r\n                    </>\r\n                    }\r\n                  </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\"}}>\r\n                \r\n                  {this.state.isClaimingRewards?\r\n                      <b>Claiming rewards...</b>\r\n                    :\r\n                    <>\r\n                      <Button style={{margin:\"auto\"}} onClick={()=>this.claimRewards()}>Claim {parseFloat(this.state.myRewards).toFixed(5)} $AVAX rewards</Button>\r\n                    </>\r\n                    }\r\n                </Grid>\r\n              </>\r\n            :\r\n            <Grid item xs={12} md={12} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\"}}>\r\n                \r\n                <b>Connect your wallet to the website to mint your NFTs.</b>\r\n\r\n            </Grid>\r\n            }\r\n           \r\n            </Grid>\r\n          </Container>\r\n       \r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport {Route, Switch ,HashRouter} from \"react-router-dom\";\r\n\r\nimport HomePage from './pages/HomePage';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route exact path=\"/home\" component={HomePage} />\r\n\r\n      <Route\r\n        render={function() {\r\n          return <h1>Not Found</h1>;\r\n        }}\r\n      />\r\n    </Switch>\r\n    </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"../node_modules/react\";\r\nimport \"./App.css\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter as Router } from \"../node_modules/react-router-dom\";\r\nimport Routes from \"./Routes\";\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Routes />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}